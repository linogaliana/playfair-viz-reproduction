[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "playfair-reproduction",
    "section": "",
    "text": "Il est beaucoup question de dette publique actuellement. Il se trouve que j’ai récemment découvert dans le cours de Stanislas Dehaene au collège de France sur la perception des graphiques  qu’une des premières représentations graphiques modernes, qu’on doit à William Playfair  en 1787, représentait justement l’évolution de la dette (anglaise) au cours du temps.\nJ’avais donc envie de m’amuser à rejouer cette figure historique sur les données françaises récentes (détails sur celles-ci plus bas). Et puis ensuite, tout de même, de faire une représentation qui bénéficie de presque 250 ans de recul sur la perception des graphiques et permettant de mieux communiquer la “vérité” (une notion qui elle-même mérite discussion) des données. Les enjeux conceptuels et des précautions d’interprétation sont proposés plus bas.\n{\n  // Crée le conteneur\n  const container = html`&lt;div class=\"figures-playfair\"&gt;&lt;/div&gt;`;\n\n  // Petite fonction utilitaire pour (re)faire la mise en page\n  const mq = window.matchMedia(\"(min-width: 900px)\");\n  function applyLayout() {\n    container.style.display = \"grid\";\n    container.style.gridTemplateColumns = mq.matches ? \"1fr 1fr\" : \"1fr\";\n    container.style.gap = \"16px\";\n    container.style.alignItems = \"start\";\n  }\n\n  // Construire les deux panneaux\n  const left = document.createElement(\"div\");\n  left.appendChild(html`&lt;h4&gt;La dette française, à la Playfair&lt;/h4&gt;`);\n  left.appendChild(\n    makeRough(\n      plot_playfair_raw,\n      { randomize: false, bowing: 0, roughness: 0, backgroundColor: \"#fbe9d3\", fillStyle: \"solid\", fontFamily: \"Patrick Hand\" }\n    )\n  );\n\n  const right = document.createElement(\"div\");\n  right.appendChild(html`&lt;h4&gt;Version originale&lt;/h4&gt;`);\n  const img = Object.assign(new Image(), { src: \"https://minio.lab.sspcloud.fr/lgaliana/data/dataviz/playfair-national-debt.png\" });\n  // Image responsive\n  img.style.maxWidth = \"100%\";\n  img.style.height = \"auto\";\n  right.appendChild(img);\n\n  container.append(left, right);\n\n  // Applique la mise en page initiale et écoute les changements\n  applyLayout();\n\n  // Compat ancien / nouveau navigateur\n  if (mq.addEventListener) mq.addEventListener(\"change\", applyLayout);\n  else mq.addListener(applyLayout);\n\n  // Sécuriser avec un listener de resize (au cas où)\n  const onResize = () =&gt; applyLayout();\n  window.addEventListener(\"resize\", onResize);\n\n  // Nettoyage si le DOM est détaché\n  container.addEventListener(\"DOMNodeRemoved\", () =&gt; {\n    if (mq.removeEventListener) mq.removeEventListener(\"change\", applyLayout);\n    else mq.removeListener(applyLayout);\n    window.removeEventListener(\"resize\", onResize);\n  }, { once: true });\n\n  return container;\n}\nParmi les principaux problèmes de la représentation ci-dessus, on peut noter l’axe à droite et le point de départ de l’axe des ordonnées. Sur ce dernier sujet, il est plus juste de partir de 0 qui fournit, en quelques sorte, un idéal (un Etat sans endettement) permettant d’évaluer plus justement les valeurs observées.\nOn peut aussi tirer parti de l’interactivité du navigateur web pour rendre plus ergonomique la visualisation. Piur améliorer la contextualisation de ces statistiques, des annotations sur certaines périodes clés ne seraient pas inutiles. Mais comme elles peuvent alourdir la visualisation sans réflexion approfondie sur l’ergonomie de la figure, j’ai préféré ne pas en mettre.\nhtml`\n${viewof yearZoom}\n${viewof plot_modern}\n`\nviewof plot_modern = Plot.plot({\n  width: 670,\n  height: 330,\n  marginBottom: 38,\n  marginRight: 130,\n  style: \"user-select: none; touch-action: none; max-width: 100%;\",\n  title: html`&lt;div style=\"font-family: var(--sans-serif); font-weight: 600;\"&gt;${'La dette des administrations publiques françaises'}&lt;/div&gt;`,\n  caption: md`Cette figure représente la [dette au sens de Maastricht](https://www.insee.fr/fr/statistiques/8574703?sommaire=8574832#documentation) des administrations publiques françaises, rapportée au PIB. Les seuils de 60% (critère de convergence de Maastricht) et de 100% (dette égale au PIB) ont été rapportés.&lt;br&gt;Source: Insee, [comptes nationaux annuels](https://www.insee.fr/fr/statistiques/8574703?sommaire=8574832#documentation)`,\n  x: { domain: yearZoom, grid: true, label: \"Année\" },\n  y: {\n    grid: true, domain: [0, d3.max(df, d =&gt; d.OBS_VALUE_NIVEAU)+10],\n    label: \"Ratio dette/PIB (%)\"\n    },\n  marks: [\n\n    Plot.ruleY(\n      [60, 100],\n      {strokeDasharray: \"4,2\"}\n    ),\n\n    // petit triangle indicateur\n    Plot.dot(\n      df,\n      pointerMX({\n        symbol: \"triangle\",\n        x: \"TIME_PERIOD\",\n        frameAnchor: \"top\",\n        atrest: \"maxX\",\n        fill: \"#c81025\",\n        rotate: 180\n      })\n    ),\n\n    // courbe fine en arrière-plan\n    Plot.lineY(df, {\n      x: \"TIME_PERIOD\",\n      y: \"OBS_VALUE_NIVEAU\",\n      stroke: \"red\",\n      strokeWidth: 1,\n      curve: \"natural\",\n      opacity: 0.250\n    }),\n\n    // courbe principale \"mise en avant\"\n    Plot.lineY(\n      df,\n      pointerMX({\n        x: \"TIME_PERIOD\",\n        y: \"OBS_VALUE_NIVEAU\",\n        atrest: \"maxX\",\n        selector: \"before\",\n        stroke: \"#c81025\",\n        curve: \"natural\",\n        strokeWidth: 3,\n        markerStart: true\n      })\n    ),\n\n\n    // annotation du nom de la série (fixe : \"Dette\")\n    Plot.text(\n      df,\n      pointerMX({\n        x: \"TIME_PERIOD\",\n        y: \"OBS_VALUE_NIVEAU\",\n        atrest: \"maxX\",\n        selector: \"eq\",\n        fontWeight: \"bold\",\n        text: d =&gt; d.OBS_VALUE_NIVEAU.toFixed(1) + \" %\",\n        fontSize: 14,\n        textAnchor: \"end\",\n        dx: 50,\n        stroke: \"white\",\n        fill: \"#c81025\"\n      })\n    ),\n\n    // annotation de valeur dynamique\n    Plot.text(\n      df,\n      pointerMX({\n        x: \"TIME_PERIOD\",\n        y: \"OBS_VALUE_NIVEAU\",\n        atrest: \"maxX\",\n        text: (d) =&gt; d.TIME_PERIOD.toLocaleString(undefined, {year: \"numeric\"}),\n        fill: \"currentColor\",\n        frameAnchor: \"top\",\n        dy: -15\n      })\n    ),\n\n  ]\n});"
  },
  {
    "objectID": "index.html#données-et-définitions-conceptuelles",
    "href": "index.html#données-et-définitions-conceptuelles",
    "title": "playfair-reproduction",
    "section": "Données et définitions conceptuelles",
    "text": "Données et définitions conceptuelles\nCes graphiques s’appuient sur les comptes nationaux - une représentation synthétique de la structure de l’économie française - publiés par l’Insee. Le concept retenu est celui de la dette au sens de Maastricht. Son périmètre est ici celui des administrations publiques (les APU dans le jargon de la comptabilité nationale) qui prend en compte les passifs de l’État, des organismes divers d’administration centrale, des administrations publiques locales et des administrations de sécurité sociale. Le périmètre des engagements de l’Etat intégrés dans la définition de la dette au sens de Maastricht sont proposés sur le site de l’Insee .\nCes données ont été récupérées par le biais de l’API Melodi de l’Insee qui vise à simplifier la récupération de certains jeux de données - notamment ceux issus de la comptabilité nationale - de l’Insee. Les données en question sont consultables sur catalogue-donnees.insee.fr/fr/explorateur/DD_CNA_APU  et récupérables sous forme de JSON depuis l’URL https://api.insee.fr/melodi/data/DD_CNA_APU?REF_SECTOR=S13&STO=_DETNET_PPIB.\nLe code  de préparation de données est disponible ci-dessous. L’ensemble du code pour produire les visualisations est disponible sur  linogaliana/playfair-viz-reproduction \n\nfiltered = df.filter(d =&gt;\n  d.TIME_PERIOD &gt;= yearZoom[0] && d.TIME_PERIOD &lt; yearZoom[1]\n);\n\n\n\n\n\n\n\n\nVoir le code (Javascript) de récupération des données\ndf = d3.json(\"https://api.insee.fr/melodi/data/DD_CNA_APU?REF_SECTOR=S13&STO=_DETNET_PPIB\").then(data =&gt; {\n  const flattened = data.observations.map(obs =&gt; {\n    const dimensions = { ...obs.dimensions };\n\n    // Convert to Date object\n    dimensions.TIME_PERIOD = new Date(dimensions.TIME_PERIOD + \"-06-01\");\n\n    const measures = Object.fromEntries(\n      Object.entries(obs.measures ?? {}).map(([k, v]) =&gt; [k, v.value])\n    );\n\n    return {\n      ...dimensions,\n      ...measures\n    };\n  });\n\n  // ⬅️ Sort in ascending order of TIME_PERIOD\n  flattened.sort((a, b) =&gt; a.TIME_PERIOD - b.TIME_PERIOD);\n\n  console.table(flattened);\n  return flattened;\n});\n\n\n\n\n\n\n\n\ntemp = Array({\n  url: \"https://minio.lab.sspcloud.fr/lgaliana/data/dataviz/chart_national_debt2.png\",\n  x: d3.timeMonth.offset( d3.min(filtered, d =&gt; d.TIME_PERIOD), -150),\n  y: d3.max(filtered, d =&gt; d.OBS_VALUE_NIVEAU) - 8\n})\n\n\n\n\n\n\n\nfunction timeRange(start, end, options = {}) {\n  let {\n    interval = \"day\",\n    step = 1,\n    format = null,\n    label = null,\n    value = null\n  } = options;\n  let ts;\n  switch (interval.toLowerCase()) {\n    case \"millisecond\":\n      ts = d3.utcMilliseconds(start, end, step);\n      format = format || \"%M:%S.%L\";\n      break;\n    case \"second\":\n      ts = d3.utcSeconds(start, end, step);\n      format = format || \"%H:%M:%S\";\n      break;\n    case \"minute\":\n      ts = d3.utcMinutes(start, end, step);\n      format = format || \"%H:%M\";\n      break;\n    case \"hour\":\n      ts = d3.utcHours(start, end, step);\n      format = format || \"%H:%M\";\n      break;\n    case \"day\":\n      ts = d3.utcDays(start, end, step);\n      format = format || \"%Y-%m-%d\";\n      break;\n    case \"week\":\n      ts = d3.utcWeeks(start, end, step);\n      format = format || \"%Y-%m-%d\";\n      break;\n    case \"month\":\n      ts = d3.utcMonths(start, end, step);\n      format = format || \"%b %Y\";\n      break;\n    case \"year\":\n      ts = d3.utcYears(start, end, step);\n      format = format || \"%Y\";\n      break;\n    default:\n      throw Error(`Unknown time interval \"${interval}\" provided to timeRange`);\n  }\n\n  // Because we are dealing with Date objects rather than primitives, the value setting for initial\n  // selection needs to be matched against closest of the internally stored Dates rather than direct\n  // equality testing.\n  const findClosestDate = (targetDate) =&gt; {\n    if (!targetDate || ts.length === 0) {\n      return null;\n    }\n    let closestDate = ts[0];\n    let smallestDifference = Math.abs(ts[0] - targetDate);\n    for (const date of ts) {\n      const difference = Math.abs(date - targetDate);\n      if (difference &lt; smallestDifference) {\n        smallestDifference = difference;\n        closestDate = date;\n      }\n    }\n    return closestDate;\n  };\n\n  let minSel, maxSel;\n  if (value && value.length === 2) {\n    minSel = findClosestDate(value[0]);\n    maxSel = findClosestDate(value[1]);\n  } else {\n    minSel = ts[0];\n    maxSel = ts.at(-1);\n  }\n\n  return offsetInterval(ts, {\n    value: [minSel, maxSel],\n    label: label,\n    format: ([a, b]) =&gt; htl.html`&lt;span ${{\n      style: \"display: flex; justify-content: space-between\"\n    }}&gt;\n      &lt;span&gt;${a.toLocaleString(undefined, {year: \"numeric\"})}&lt;/span&gt;\n      &lt;span&gt;${b.toLocaleString(undefined, {year: \"numeric\"})}&lt;/span&gt;\n    &lt;/span&gt;`\n    })\n\n}\n\n\n\n\n\n\n\nimport {offsetInterval} from \"@mootari/offset-slider\"\n\n\n\n\n\n\n\nhtml`\n&lt;link href=\"https://fonts.googleapis.com/css2?family=Indie+Flower&family=Patrick+Hand&family=Shadows+Into+Light&display=swap\" rel=\"stylesheet\"&gt;\n`\n\n\n\n\n\n\n\nsvg2rough = import(\"https://cdn.skypack.dev/svg2roughjs@3.0.1?min\")\n\n\n\n\n\n\n\nmakeRough = (svg, {\n  backgroundColor = \"white\",\n  fontFamily = \"cursive\",\n  fillStyle = \"hachure\",\n  roughness = 1.5,\n  bowing = 1,\n  randomize = true,\n  pencilFilter = true\n} = {}) =&gt; {\n  const S = Object.assign(\n    new svg2rough.Svg2Roughjs(document.createElement(\"svg\")),\n    {\n      svg,\n      backgroundColor,\n      pencilFilter,\n      randomize,\n      fontFamily,\n      roughConfig: { bowing, roughness, fillStyle }\n    }\n  );\n  S.sketch();\n  return S.outputElement;\n}\n\n\n\n\n\n\n\nviewof quartoThemeIsDark = {\n  const span = html`&lt;span style=\"display: none;\"&gt;&lt;/span&gt;`;\n\n  function updateTheme() {\n    const isDark = document.body.classList.contains(\"quarto-dark\");\n    span.value = isDark;\n    span.dispatchEvent(new CustomEvent(\"input\"));\n  }\n\n  // Initial check\n  updateTheme();\n\n  // Observer les changements de classe sur &lt;body&gt;\n  const observer = new MutationObserver(() =&gt; updateTheme());\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: [\"class\"]\n  });\n\n  // Nettoyage si jamais nécessaire\n  span.remove = () =&gt; observer.disconnect();\n\n  return span;\n}\n\n\n\n\n\n\n\n\nimport {pointerMX, renderMultipleText, customOverlapRender} from \"@observablehq/plot-pointer-driven-marks\"\n\n\n\n\n\n\n\nplot_playfair_raw = {\n\n  // règle de responsive\n  let plotWidth;\n  if (width &lt; 768) { // seuil pour mobile/tablette\n    plotWidth = width * 0.95; // quasi toute la largeur\n  } else {\n    plotWidth = width * 0.5; // moitié de l'écran sur grand\n  }\n\n  const plotHeight = plotWidth * 8.5/5;\n\n  const plot_playfair_raw = Plot.plot({\n    width: plotWidth,\n    height: plotHeight,\n    style: {\n      backgroundColor: '#fbe9d3',\n      color: 'black',\n    },\n    x: { label: \"Année\", domain: [d3.min(df, d =&gt; d.TIME_PERIOD), d3.max(df, d =&gt; d.TIME_PERIOD)]},\n    y: {\n      axis: \"right\",\n      label: \"Ratio dette/PIB (%)\",\n    },\n    marks: [\n      Plot.areaY(df, {\n        x: \"TIME_PERIOD\",\n        y2: \"OBS_VALUE_NIVEAU\",\n        y1: d =&gt; d3.min(df, d =&gt; d.OBS_VALUE_NIVEAU),\n        fill: \"#a9997a\",\n        curve: \"linear\",\n        opacity: 0.8\n      }),\n      Plot.line(df, {\n        x: \"TIME_PERIOD\",\n        y: \"OBS_VALUE_NIVEAU\",\n        stroke: \"darkred\",\n        strokeWidth: 3.5,\n        curve: \"linear\",\n        tip: true,\n        strokeOpacity: 0.6\n      }),\n      Plot.gridY({ strokeOpacity: 0.6 }),\n      Plot.gridX({ strokeOpacity: 0.6, interval: \"1 year\" }),\n\n      // --- évènements ---\n      Plot.text(\n        [{ TIME_PERIOD: new Date(\"2008-01-01\"), OBS_VALUE_NIVEAU: d3.max(df, d =&gt; d.OBS_VALUE_NIVEAU) }],\n        {\n          x: (d) =&gt; d3.timeMonth.offset(d.TIME_PERIOD, -5),\n          y: (d) =&gt; d.OBS_VALUE_NIVEAU - 20,\n          text: () =&gt; \"Crise financière\",\n          rotate: -90,\n          dy: -20,\n          fontSize: 12,\n          fill: \"black\",\n          textAnchor: \"end\",\n          fontWeight: \"bold\"\n        }\n      ),\n      Plot.text(\n        [{ TIME_PERIOD: new Date(\"2020-01-01\"), OBS_VALUE_NIVEAU: d3.max(df, d =&gt; d.OBS_VALUE_NIVEAU) }],\n        {\n          x: (d) =&gt; d3.timeMonth.offset(d.TIME_PERIOD, -5),\n          y: (d) =&gt; d.OBS_VALUE_NIVEAU - 20,\n          text: () =&gt; \"Covid\",\n          rotate: -90,\n          dy: -20,\n          fontSize: 12,\n          fill: \"black\",\n          textAnchor: \"end\",\n          fontWeight: \"bold\"\n        }\n      ),\n\n      // ton image\n      Plot.image(temp, {\n        x: \"x\",\n        y: \"y\",\n        src: \"https://minio.lab.sspcloud.fr/lgaliana/data/dataviz/chart_national_debt2.png\",\n        width: 160,\n        title: \"Title\"\n      })\n    ]\n  });\n\n  return plot_playfair_raw\n}\n\n\n\n\n\n\n\nviewof yearZoom = timeRange(\n  new d3.min(df, d =&gt; d.TIME_PERIOD),\n  new d3.max(df, d =&gt; d.TIME_PERIOD),\n  {\n    interval: \"year\",\n    value: [new d3.min(df, d =&gt; d.TIME_PERIOD), new d3.max(df, d =&gt; d.TIME_PERIOD)]\n  }\n)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]